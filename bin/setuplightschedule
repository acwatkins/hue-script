#!/usr/bin/env python3

import datetime
import hues
import logging
import pytz
import time
from astral import Astral
from phue import Bridge

logging.basicConfig(level=logging.INFO)

hues.setTimezone(pytz.timezone("America/New_York"))
schedule = hues.Schedule('huebridge', 'newdeveloper')
astral = Astral()
astral.solar_depression = 'civil'
city = astral["Orlando"]
sunToday = city.sun(date = datetime.date.today(), local = True)
sunTomorrow = city.sun(date = datetime.date.today() + datetime.timedelta(days = 1), local = True)
sunsetTime = sunToday["sunset"]
sunriseTime = sunTomorrow["sunrise"]
sunriseLightsTransitionTime = sunriseTime + datetime.timedelta(minutes = 30)
sunriseLightsOffTime = sunriseTime + datetime.timedelta(minutes = 60)
sunsetLightsOnTime = sunsetTime - datetime.timedelta(minutes = 60)

allLights = ["FamilyRoomLeft", "MasterBedroomHers", "FamilyRoomRight", "FamilyRoomTorch", "MasterBedroomHis"]
familyRoom = ["FamilyRoomLeft", "FamilyRoomRight", "FamilyRoomTorch"]
masterBedroom = ["MasterBedroomHers", "MasterBedroomHis"]

def wakeupRoutine(beginDateTime, lightNames):
	currentTime = beginDateTime - datetime.timedelta(minutes=15)

	if (beginDateTime < sunriseTime):
		schedule.addEvent(currentTime, lightNames, 'orangeLow', 0, lightOn = True)
		schedule.addEvent(beginDateTime, lightNames, [ 'orangeLow', 'yellowSun', 'relax', 'reading', 'white' ], endDateTime=sunriseTime, lightOn = True)
		schedule.addEvent(sunriseTime, lightNames, 'energize', 30 * 10, lightOn = True)

def bedTimeRoutine(beginDateTime, lightNames):
	if (isinstance(lightNames, str)):
		lightNames = [lightNames]
	currentTime = beginDateTime

	currentTime += datetime.timedelta(minutes = 20)
	for light in lightNames:
		schedule.addEvent(currentTime, light, 'orangeLow', 0, lightOn = False)
		currentTime += datetime.timedelta(minutes = 5)

def setupSchedule(bedTimeHis, bedTimeHers, sleepDurationHis, sleepDurationHers):
	bridge = Bridge('huebridge', 'newdeveloper')
	# bridge.connect()
	#bridge.get_api()

	# lightsByName = bridge.get_light_objects('name')
	# for light in lightsByName:
	# 	print(str(light))

	schedules = bridge.get_schedule()
	logging.info("Removing old schedules")
	for i in schedules:
		bridge.delete_schedule(i)

	logging.info(sunsetLightsOnTime.strftime("%H:%M:%S turn on lights"))
	schedule.addEvent(sunsetLightsOnTime, allLights, 'energize', transitionTimeInDeciseconds=30 * 60 * 10, lightOn = True)

	logging.info("sunset is at " + str(sunsetTime))

	schedule.addEvent(sunsetTime, allLights, 'white', transitionTimeInDeciseconds=30 * 10)
	startTransition = sunsetTime + datetime.timedelta(minutes=15)

	schedule.addEvent(startTransition, masterBedroom, [ 'white', 'reading', 'reading', 'relax', 'yellowSun' ], endDateTime=bedTimeHers)
	schedule.addEvent(bedTimeHers, masterBedroom, 'orangeLow', 15 * 60 * 10)
	bedTimeRoutine(bedTimeHers, 'MasterBedroomHers')
	schedule.addEvent(startTransition, familyRoom, [ 'white', 'reading', 'reading', 'relax', 'yellowSun' ], endDateTime=bedTimeHis)
	bedTimeRoutine(bedTimeHis, familyRoom + ['MasterBedroomHis'])

	wakeUpTimeHis = bedTimeHis + datetime.timedelta(hours = sleepDurationHis)
	wakeUpTimeHers = bedTimeHers + datetime.timedelta(hours = sleepDurationHers)
	lightsOnTime = wakeUpTimeHers - datetime.timedelta(minutes = 15)
	if (wakeUpTimeHis != wakeUpTimeHers):
		lightsOnHers = wakeUpTimeHers - datetime.timedelta(minutes = 15)
		lightsOffHers = wakeUpTimeHers + datetime.timedelta(minutes = 30)
		schedule.addEvent(lightsOnHers, 'MasterBedroomHers', 'orangeLow', 0, lightOn = True)
		schedule.addEvent(lightsOffHers, 'MasterBedroomHers', 'orangeLow', 0, lightOn = False)

		wakeupRoutine(wakeUpTimeHers, familyRoom)
		wakeupRoutine(wakeUpTimeHis, masterBedroom)
	else:
		wakeupRoutine(lightsOnTime, allLights)

	logging.info("sunrise is at " + str(sunriseTime))
	logging.info(sunriseLightsOffTime.strftime("%H:%M:%S turn off lights"))
	schedule.addEvent(sunriseLightsOffTime, allLights, 'energize', 0, lightOn = False)


if __name__ == '__main__':
	weekday = datetime.datetime.now().weekday()
	bedTimeHers = hues.LocalDateTime(22, 0, 0)
	bedTimeHis = hues.LocalDateTime(22, 0, 0)#, datetime.datetime.today() + datetime.timedelta(days = 1))
	sleepDurationHis = 8
	sleepDurationHers = 8
	if (weekday == 4 or weekday == 5):
		bedTimeHis = hues.LocalDateTime(23, 0, 0)
	elif (weekday == 0):
		bedTimeHis = hues.LocalDateTime(0, 0, 0, datetime.datetime.today() + datetime.timedelta(days = 1))
		sleepDurationHis = 7

	setupSchedule(bedTimeHis, bedTimeHers, sleepDurationHis, sleepDurationHers)
